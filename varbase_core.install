<?php

/**
 * @file
 * Install, update and uninstall functions for the Varbase core module.
 */

use Symfony\Component\Yaml\Yaml;
use Drupal\Core\Config;
use Drupal\Core\Config\InstallStorage;
use Drupal\Core\Config\StorageInterface;
use Drupal\Core\Config\FileStorage;

/**
 * Implements hook_install().
 */
function varbase_core_install() {

  $module_name = preg_replace('/_install$/', '', __FUNCTION__);
  $module_path = Drupal::service('module_handler')->getModule($module_name)->getPath();

  // Processer for install: in [$module_name].info.yml file.
  // ---------------------------------------------------------------------------
  $module_info_file = $module_path . '/'. $module_name . '.info.yml';
  if (file_exists($module_info_file)) {
    $module_info_data = (array) Yaml::parse(file_get_contents($module_info_file));
    if (isset($module_info_data['install'])
      && is_array($module_info_data['install'])) {
      \Drupal::service('module_installer')->install($module_info_data['install'], TRUE);
    }
  }

  // Install optional configs.
  $optional_install_path = $module_path . '/' . InstallStorage::CONFIG_OPTIONAL_DIRECTORY;
  if (is_dir($optional_install_path)) {
    $config_installer = \Drupal::service('config.installer');
    $config_installer->installDefaultConfig('module', $module_name);

    // Create field storage configs first in active config.
    $storage_config_files = file_scan_directory($optional_install_path, '/^field.storage.*\\.(yml)$/i');
    if (isset($storage_config_files) && is_array($storage_config_files)) {
      foreach ($storage_config_files as $storage_config_file) {
        $storage_config_file_content = file_get_contents(DRUPAL_ROOT . '/' . $storage_config_file->uri);
        $storage_config_file_data = (array) Yaml::parse($storage_config_file_content);
        $config_factory = \Drupal::configFactory()->getEditable($storage_config_file->name);
        $config_factory->setData($storage_config_file_data)->save(TRUE);
      }
    }

    // Install any optional config the module provides.
    $storage = new FileStorage($optional_install_path, StorageInterface::DEFAULT_COLLECTION);
    $config_installer->installOptionalConfig($storage, '');

    // Have the .settings.yml configs into the active config.
    $settings_config_files = file_scan_directory($optional_install_path, '/^.*\\(settings.yml)$/i');
    if (isset($settings_config_files) && is_array($settings_config_files)) {
      foreach ($settings_config_files as $settings_config_file) {
        $settings_config_file_content = file_get_contents(DRUPAL_ROOT . '/' . $settings_config_file->uri);
        $settings_config_file_data = (array) Yaml::parse($settings_config_file_content);
        $config_factory = \Drupal::configFactory()->getEditable($settings_config_file->name);
        $config_factory->setData($settings_config_file_data)->save(TRUE);
      }
    }
  }
  // ---------------------------------------------------------------------------

}

/**
 * Enable [Varbase Update Helper] module.
 */
function varbase_core_update_8600() {
  if (!\Drupal::moduleHandler()->moduleExists('varbase_update_helper')) {
    \Drupal::service('module_installer')->install(['checklistapi', 'update_helper', 'update_helper_checklist', 'varbase_update_helper'], FALSE);
  }
}

/**
 * Added a default [Simple sitemap] settings with [Skip non-existent translations] checked by default.
 */
function varbase_core_update_8601($force = false) {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('varbase_core', 'varbase_core_update_8601', $force);

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Add new filters to the Content and People views so that admins cam filter using date ranges.
 */
function varbase_core_optional_update_8602($force = false) {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('varbase_core', 'varbase_core_update_8602', $force);

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Changed Default database server config to have matching partial.
 */
function varbase_core_update_8603($force = false) {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('varbase_core', 'varbase_core_update_8603', $force);

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Varbase editor Switched to use [Remote Video] with oEmbed from Drupal 8.6.x core.
 * Changed [Rich editor] text format to allow for Align images Uses a data-align attribute on <img> tags to align images.
 * Removed [Drupal Image] and [Video embed] CKEditor command buttons from Rich editor and Simple editor.
 */
function varbase_core_update_8604($force = false) {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('varbase_core', 'varbase_core_update_8604', $force);

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Varbase blog Switched to use [Remote Video] with oEmbed from Drupal 8.6.x core.
 * Change the [Field Media] og:image metatags for [Varbase blog] to use our custom social token [node:field_media:entity:social_large]
 * Changed [Main Image] field to [Main Media] to use [Field Media] from [Varbase Core] for images and video posts, and use the [Media Browser] from [Varbase Media] as the default Media browser for the [Blog Post] content type
 */
function varbase_core_update_8605($force = false) {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('varbase_core', 'varbase_core_update_8605', $force);

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Fixed homepage with H1 tag for website name.
 */
function varbase_core_update_8606($force = false) {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('varbase_core', 'varbase_core_update_8606', $force);

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Changed filed [Slide media (image/video)] to use Media types of Image, Video (embed), and Video (local), and -changed the [Heroslider Media Browser] to let user upload videos.
 */
function varbase_core_update_8607($force = false) {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('varbase_core', 'varbase_core_update_8607', $force);

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Changed to use the Image Browser and removed the carousels media browser.
 */
function varbase_core_update_8608($force = false) {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('varbase_core', 'varbase_core_update_8608', $force);

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Removed [panelizer] module with all used configs.
 */
function varbase_core_update_8609($force = false) {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('varbase_core', 'varbase_core_update_8609', $force);

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Changed modules and config to work with [Media] Drupal core
 */
function varbase_core_update_8610($force = false) {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('varbase_core', 'varbase_core_update_8610', $force);

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}
